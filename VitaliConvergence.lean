/-
Copyright (c) 2023 Igor Khavkine. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Igor Khavkine
-/

import Mathlib

open Classical Set Filter Topology MeasureTheory NNReal ENNReal


/- missing lemmas/theorems from mathlib4 -/

namespace Set

theorem indicator_tsub {Œ± M : Type*}
    [PartialOrder M] [AddCommMonoid M] [Sub M] [OrderedSub M] (s : Set Œ±) (f g : Œ± ‚Üí M) :
    (indicator s fun a ‚Ü¶ f a - g a) = fun a ‚Ü¶ indicator s f a - indicator s g a := by
  suffices ‚àÄ b, (indicator s fun a ‚Ü¶ f a - g a) b = (fun a ‚Ü¶ indicator s f a - indicator s g a) b by
    ext b
    exact this b
  intro b; simp only []
  repeat rw [indicator_apply s]
  by_cases hb : b ‚àà s <;> simp only [hb, ite_true, ite_false]
  exact (tsub_zero 0).symm

theorem indicator_tsub' {Œ± M : Type*}
    [PartialOrder M] [AddCommMonoid M] [Sub M] [OrderedSub M] (s : Set Œ±) (f g : Œ± ‚Üí M) :
    (indicator s (f - g)) = (indicator s f) - (indicator s g) := by
  suffices ‚àÄ b, (indicator s fun a ‚Ü¶ f a - g a) b = (fun a ‚Ü¶ indicator s f a - indicator s g a) b by
    ext b
    exact this b
  intro b; simp only []
  repeat rw [indicator_apply s]
  by_cases hb : b ‚àà s <;> simp only [hb, ite_true, ite_false]
  exact (tsub_zero 0).symm

end Set

namespace ENNReal

theorem rpow_inv_rpow_self {y : ‚Ñù} (hy : y ‚â† 0) (x : ‚Ñù‚â•0‚àû) : (x ^ y) ^ (1 / y) = x := by
  rw [‚Üê ENNReal.rpow_mul]; field_simp

theorem rpow_self_rpow_inv {y : ‚Ñù} (hy : y ‚â† 0) (x : ‚Ñù‚â•0‚àû) : (x ^ (1 / y)) ^ y = x := by
  rw [‚Üê ENNReal.rpow_mul]; field_simp

end ENNReal


namespace MeasureTheory

variable {Œ± Œ≤ Œπ : Type*} {m : MeasurableSpace Œ±} {Œº : Measure Œ±} [NormedAddCommGroup Œ≤]


/- Counterpart of `tendsto_indicator_ge` from `MeasureTheory.Function.UniformIntegrable`.
   It is used in `lintegral_indicator_compl_le`, so it is more convenient
   to formulate it for `f` valued in `ENNReal`. Could be wrapped with `nnnorm` to make it
   more general. -/
theorem tendsto_ENNReal_indicator_lt (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (x : Œ±) :
    Tendsto (fun M : ‚Ñï => { x | f x < 1 / (‚ÜëM + 1) }.indicator f x) atTop (ùìù 0) := by
  by_cases hfx : f x ‚â† 0
  . refine' tendsto_atTop_of_eventually_const (i‚ÇÄ := Nat.ceil (1 / f x).toReal) fun n hn => _
    rw [Set.indicator_of_not_mem]
    simp only [not_lt, Set.mem_setOf_eq, one_div, inv_le_iff_inv_le]
    simp only [one_div, ge_iff_le, Nat.ceil_le] at hn
    calc
      (f x)‚Åª¬π
        = _ := (ofReal_toReal (inv_ne_top.mpr hfx)).symm
      _ ‚â§ _ := ENNReal.ofReal_le_ofReal hn
      _ = _ := by norm_cast
      ‚Üën ‚â§ ‚Üën + 1 := by norm_num
  . refine' tendsto_atTop_of_eventually_const (i‚ÇÄ := 0) fun n _ => _
    simp only [ne_eq, not_not] at hfx
    simp only [mem_setOf_eq, not_lt, indicator_apply_eq_zero]
    intro; assumption


section UnifIntegrable

/- Missing lemmas from the same section of `MeasureTheory.Function.UniformIntegrable`. -/

/-- Uniform integrability is preserved by restriction of functions to a set. -/
theorem UnifIntegrable.indicator {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}
  (hui : UnifIntegrable f p Œº) (E : Set Œ±)
    : UnifIntegrable (fun i => E.indicator (f i)) p Œº := by
  intro Œµ hŒµ; obtain ‚ü®Œ¥, hŒ¥_pos, hŒµ‚ü© := hui hŒµ
  use Œ¥, hŒ¥_pos; intro i s hs hŒºs
  dsimp only -- eta reduction
  calc
    ENNReal.ofReal Œµ ‚â• _ := (hŒµ i s hs hŒºs)
    _ ‚â• _ := (snorm_indicator_le _)
    _ = _ := by rw [indicator_indicator, inter_comm, ‚Üê indicator_indicator]
  -- alternative: rw [indicator_indicator, inter_comm, ‚Üê indicator_indicator]; exact (hŒ¥ i s hs hŒºs).trans' (snorm_indicator_le (s.indicator (f i)))

/-- Uniform integrability is preserved by restriction of measure to measurable set. -/
theorem unifIntegrable_restrict {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} {E : Set Œ±}
  (hui : UnifIntegrable f p Œº) (hE : MeasurableSet E)
    : UnifIntegrable (fun i => f i) p (Œº.restrict E) := by
  intro Œµ hŒµ; obtain ‚ü®Œ¥, hŒ¥_pos, hŒµ‚ü© := hui hŒµ
  use Œ¥, hŒ¥_pos; intro i s hs hŒºs
  have hŒºEs : Œº (E ‚à© s) ‚â§ _ := by calc
    _ = _ := by rw [inter_comm]
    _ = (Œº.restrict E) s := (Œº.restrict_apply hs).symm
    _ ‚â§ ENNReal.ofReal Œ¥ := hŒºs
  have hEŒµ := (hŒµ i (E ‚à© s) (hE.inter hs) hŒºEs)
  dsimp only at hEŒµ ‚ä¢ -- eta reduction
  calc
    _ = _ := (snorm_indicator_eq_snorm_restrict hE).symm
    _ = _ := by conv => { lhs; rw [indicator_indicator, ‚Üê E.inter_self, inter_assoc, ‚Üê indicator_indicator] }
    _ = _ := snorm_indicator_eq_snorm_restrict hE
    _ ‚â§ _ := by exact (snorm_mono_measure _ Œº.restrict_le_self)
    _ ‚â§ ENNReal.ofReal Œµ := hEŒµ


end UnifIntegrable


section UnifTight

/- This follows closely the `UnifIntegrable` section from `MeasureTheory.Functions.UniformIntegrable`.-/

variable {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû}


/-- Definition of being Uniformly Tight. -/
def UnifTight {_ : MeasurableSpace Œ±} (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : Prop :=
  ‚àÄ ‚¶ÉŒµ : ‚Ñù‚¶Ñ (_ : 0 < Œµ), ‚àÉ (s : Set Œ±) (_: MeasurableSet s) (_: Œº s < ‚àû),
    ‚àÄ i, snorm (s·∂ú.indicator (f i)) p Œº ‚â§ ENNReal.ofReal Œµ

namespace UnifTight

protected theorem add (hf : UnifTight f p Œº) (hg : UnifTight g p Œº) (hp : 1 ‚â§ p)
    (hf_meas : ‚àÄ i, AEStronglyMeasurable (f i) Œº) (hg_meas : ‚àÄ i, AEStronglyMeasurable (g i) Œº) :
    UnifTight (f + g) p Œº := by
  intro Œµ hŒµ
  have hŒµ2 : 0 < Œµ / 2 := half_pos hŒµ
  obtain ‚ü®s‚ÇÅ, hms‚ÇÅ, hŒºs‚ÇÅ, hfŒµ‚ÇÅ‚ü© := hf hŒµ2
  obtain ‚ü®s‚ÇÇ, hms‚ÇÇ, hŒºs‚ÇÇ, hgŒµ‚ÇÇ‚ü© := hg hŒµ2
  have hms := hms‚ÇÅ.union hms‚ÇÇ
  refine' ‚ü®s‚ÇÅ ‚à™ s‚ÇÇ, hms, (measure_union_le (Œº := Œº) s‚ÇÅ s‚ÇÇ).trans_lt (ENNReal.add_lt_top.mpr ‚ü®hŒºs‚ÇÅ,hŒºs‚ÇÇ‚ü©), fun i => _‚ü©
  simp_rw [Pi.add_apply, Set.indicator_add']
  refine' (snorm_add_le ((hf_meas i).indicator hms.compl) ((hg_meas i).indicator hms.compl) hp).trans _
  have hŒµ_halves : ENNReal.ofReal Œµ = ENNReal.ofReal (Œµ / 2) + ENNReal.ofReal (Œµ / 2) := by
    rw [‚Üê ENNReal.ofReal_add hŒµ2.le hŒµ2.le, add_halves]
  rw [compl_union]
  calc
    _ = snorm (indicator (s‚ÇÇ·∂ú ‚à© s‚ÇÅ·∂ú) (f i)) p Œº + _ := by
        congr; rw [inter_comm]
    _ ‚â§ snorm (indicator s‚ÇÅ·∂ú (f i)) p Œº + snorm (indicator s‚ÇÇ·∂ú (g i)) p Œº := by
        gcongr <;> rw [‚Üê indicator_indicator] <;> exact snorm_indicator_le _
    _ ‚â§ _ := add_le_add (hfŒµ‚ÇÅ i) (hgŒµ‚ÇÇ i)
    _ = _ := hŒµ_halves.symm

protected theorem neg (hf : UnifTight f p Œº) : UnifTight (-f) p Œº := by
  simp_rw [UnifTight, Pi.neg_apply, Set.indicator_neg', snorm_neg]
  exact hf

protected theorem sub (hf : UnifTight f p Œº) (hg : UnifTight g p Œº) (hp : 1 ‚â§ p)
    (hf_meas : ‚àÄ i, AEStronglyMeasurable (f i) Œº) (hg_meas : ‚àÄ i, AEStronglyMeasurable (g i) Œº) :
    UnifTight (f - g) p Œº := by
  rw [sub_eq_add_neg]
  exact hf.add hg.neg hp hf_meas fun i => (hg_meas i).neg


protected theorem ae_eq (hf : UnifTight f p Œº) (hfg : ‚àÄ n, f n =·µê[Œº] g n) :
    UnifTight g p Œº := by
  intro Œµ hŒµ
  obtain ‚ü®s, hms, hŒºs, hfŒµ‚ü© := hf hŒµ
  refine' ‚ü®s, hms, hŒºs, fun n /-s hs hŒºs-/ => (le_of_eq <| snorm_congr_ae _).trans (hfŒµ n)‚ü©
  filter_upwards [hfg n] with x hx
  simp only [indicator, mem_compl_iff, ite_not, hx]

end UnifTight


/-- Core lemma to be used in `MeasureTheory.Mem‚Ñíp.snorm_indicator_compl_le`. -/
theorem lintegral_indicator_compl_le /- (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) -/
    {g : Œ± ‚Üí ‚Ñù‚â•0‚àû} (haesmg : AEStronglyMeasurable g Œº) (hg : ‚à´‚Åª a, g a ‚àÇŒº < ‚àû)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ (s : Set Œ±) (_ : MeasurableSet s) (_ : Œº s < ‚àû),
      ‚à´‚Åª a, (s·∂ú.indicator g) a ‚àÇŒº ‚â§ ENNReal.ofReal Œµ := by
  -- come up with an a.e. equal strongly measurable replacement `f` for `g`
  have hsmf := haesmg.stronglyMeasurable_mk
  have hgf := haesmg.ae_eq_mk
  set f := haesmg.mk
  have hf := calc
    _ = _ := (lintegral_congr_ae hgf).symm
    _ < ‚àû := hg
  conv => -- replace `g` by `f` in goal
    enter [1, s, 1, hms, 1, hŒºs]
    rw [lintegral_congr_ae hgf.indicator]
    rfl
  -- set up a sequence of vertical cutoffs of f by 1/(M+1)
  have hmeas_lt : ‚àÄ M : ‚Ñï, MeasurableSet { x | f x < 1 / (‚ÜëM + 1) } := by
    intro M
    apply StronglyMeasurable.measurableSet_lt hsmf stronglyMeasurable_const
  have hmeas : ‚àÄ M : ‚Ñï, Measurable ({ x | f x < 1 / (‚ÜëM + 1) }.indicator f) := by
    intro M
    apply StronglyMeasurable.measurable
    apply hsmf.indicator
    apply hmeas_lt M
  -- show that the sequence a.e. converges to 0
  have htendsto :
      ‚àÄ·µê x ‚àÇŒº, Tendsto (fun M : ‚Ñï => { x | f x < 1 / (‚ÜëM + 1) }.indicator f x) atTop (ùìù 0) :=
    univ_mem' (id fun x => tendsto_ENNReal_indicator_lt f x)
  -- use Lebesgue dominated convergence to show that the integrals eventually go to zero
  have : Tendsto (fun n : ‚Ñï ‚Ü¶ ‚à´‚Åª a, { x | f x < 1 / (‚Üën + 1) }.indicator f a ‚àÇŒº)
      atTop (ùìù (‚à´‚Åª (_ : Œ±), 0 ‚àÇŒº)) := by
    refine' tendsto_lintegral_of_dominated_convergence _ hmeas _ hf.ne htendsto
    -- show that the sequence is bounded by f (which is integrable)
    refine' fun n => univ_mem' (id fun x => _)
    by_cases hx : f x < 1 / (‚Üën + 1)
    ¬∑ dsimp
      rwa [Set.indicator_of_mem]
    ¬∑ dsimp
      rw [Set.indicator_of_not_mem]
      ¬∑ exact zero_le _
      ¬∑ assumption
  -- rewrite limit to be more usable and get the sufficiently large M, so the integral is < Œµ
  rw [lintegral_zero, ENNReal.tendsto_atTop_zero] at this
  obtain ‚ü®M, hM‚ü© := this (ENNReal.ofReal Œµ) (ENNReal.ofReal_pos.2 hŒµ)
  simp only [true_and_iff, ge_iff_le, zero_tsub, zero_le, sub_zero, zero_add, coe_nnnorm,
    Set.mem_Icc] at hM
  -- the target estimate is now in hM
  have hM := hM M le_rfl
  -- let s be the complement of the integration domain in hM, prove its measurability and finite measure
  have : { x | f x < 1 / (‚ÜëM + 1) } = { x | 1 / (‚ÜëM + 1) ‚â§ f x }·∂ú := by
    apply Set.ext; intro x
    simp only [mem_compl_iff, mem_setOf_eq, not_le]
  have hms := (hmeas_lt M).compl
  rw [this] at hM hms
  rw [compl_compl] at hms
  have hŒºs := calc
    Œº { x | 1 / (‚ÜëM + 1) ‚â§ f x }
      ‚â§ _ := meas_ge_le_lintegral_div hsmf.aemeasurable (by norm_num) (by norm_num)
    _ < ‚àû := by apply div_lt_top hf.ne (by norm_num)
  set s := { x | 1 / (‚ÜëM + 1) ‚â§ f x }
  -- fulfill the goal
  use s, hms, hŒºs, hM


/-- A single function that is `Mem‚Ñíp f p Œº` is tight wrt to `Œº`. -/
theorem Mem‚Ñíp.snorm_indicator_compl_le (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû)
    {f : Œ± ‚Üí Œ≤} (hf : Mem‚Ñíp f p Œº)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ (s : Set Œ±) (_ : MeasurableSet s) (_ : Œº s < ‚àû),
      snorm (s·∂ú.indicator f) p Œº ‚â§ ENNReal.ofReal Œµ := by
  -- The proof unwraps `Mem‚Ñíp f p Œº` and applies the analogous result for `lintegral`.
  -- do some arithmetic that will come in useful
  have hp_pos := zero_lt_one.trans_le hp_one
  have hp_nz := hp_pos.ne.symm
  have hrp_pos : 0 < p.toReal := ENNReal.toReal_pos hp_nz hp_top
  have hŒµp : 0 < Œµ ^ p.toReal := by simp only [Real.rpow_pos_of_pos, hŒµ] --exact Real.rpow_pos_of_pos hŒµ p.toReal
  -- decode Mem‚Ñíp into a.e. strong measurability and finite snorm
  obtain ‚ü®haesmf, hsnf‚ü© := hf
  -- transform snorm to lintegral
  rw [snorm_eq_snorm' (by assumption) (by assumption)] at hsnf
  have hinpf := calc
    _ = _ := lintegral_rpow_nnnorm_eq_rpow_snorm' hrp_pos
    _ < ‚àû := (rpow_lt_top_iff_of_pos hrp_pos).mpr hsnf --by sorry
  -- get a.e. strong measurability for the integrand
  -- XXX: why does `AEStronglyMeasurable.ennnorm` only give the weaker AEMeasurable?
  have haesmnf := (ENNReal.continuous_coe.comp_aestronglyMeasurable haesmf.nnnorm)
  have haesmnpf := (@ENNReal.continuous_rpow_const p.toReal).comp_aestronglyMeasurable haesmnf
  -- use core result for lintegral, the target estimate will be in `hsfŒµ`
  obtain ‚ü®s, hms, hŒºs, hsfŒµ‚ü© := lintegral_indicator_compl_le haesmnpf hinpf hŒµp
  use s, hms, hŒºs
  -- move indicator through function compositions, XXX: is this simp-able?
  rw [‚Üê Function.comp_def (fun x : ‚Ñù‚â•0‚àû => x ^ p.toReal)] at hsfŒµ
  rw [‚Üê Function.comp_def ENNReal.ofNNReal] at hsfŒµ
  rw [‚Üê Function.comp_def nnnorm] at hsfŒµ
  rw [s·∂ú.indicator_comp_of_zero (@ENNReal.zero_rpow_of_pos p.toReal hrp_pos)] at hsfŒµ
  rw [s·∂ú.indicator_comp_of_zero ENNReal.coe_zero] at hsfŒµ
  rw [s·∂ú.indicator_comp_of_zero nnnorm_zero] at hsfŒµ
  rw [Function.comp_def nnnorm] at hsfŒµ
  rw [Function.comp_def ENNReal.ofNNReal] at hsfŒµ
  rw [Function.comp_def (fun x : ‚Ñù‚â•0‚àû => x ^ p.toReal)] at hsfŒµ
  -- convert lintegral to snorm
  rw [lintegral_rpow_nnnorm_eq_rpow_snorm' hrp_pos] at hsfŒµ
  rw [‚Üê snorm_eq_snorm' (by assumption) (by assumption)] at hsfŒµ
  -- commute ENNReal coersion with rpow, use rpow monotonicity
  rw [‚Üê ofReal_rpow_of_pos (by assumption)] at hsfŒµ
  rw [ENNReal.rpow_le_rpow_iff hrp_pos] at hsfŒµ
  exact hsfŒµ


/-- A constant function is uniformly integrable. -/
theorem unifTight_const {g : Œ± ‚Üí Œ≤} (hp : 1 ‚â§ p) (hp_ne_top : p ‚â† ‚àû) (hg : Mem‚Ñíp g p Œº) :
    UnifTight (fun _ : Œπ => g) p Œº := by
  intro Œµ hŒµ
  obtain ‚ü®s, hms, hŒºs, hgŒµ‚ü© := hg.snorm_indicator_compl_le hp hp_ne_top hŒµ
  exact ‚ü®s, hms, hŒºs, fun _ => hgŒµ‚ü©

/-- A single function is uniformly integrable. -/
theorem unifTight_subsingleton [Subsingleton Œπ] (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû)
    {f : Œπ ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) : UnifTight f p Œº := by
  intro Œµ hŒµ
  by_cases hŒπ : Nonempty Œπ
  ¬∑ cases' hŒπ with i
    obtain ‚ü®s, hms, hŒºs, hfŒµ‚ü© := (hf i).snorm_indicator_compl_le hp_one hp_top hŒµ
    refine' ‚ü®s, hms, hŒºs, fun j => _‚ü©
    convert hfŒµ
  ¬∑ exact ‚ü®‚àÖ, (by measurability), (by measurability),
      fun i => False.elim <| hŒπ <| Nonempty.intro i‚ü©


/-- This lemma is less general than `MeasureTheory.unifIntegrable_finite` which applies to
all sequences indexed by a finite type. -/
theorem unifTight_fin (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) {n : ‚Ñï} {f : Fin n ‚Üí Œ± ‚Üí Œ≤}
    (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) : UnifTight f p Œº := by
  revert f
  induction' n with n h
  ¬∑ intro f hf
    have : Subsingleton (Fin Nat.zero) := subsingleton_fin_zero -- Porting note: Added this instance
    exact unifTight_subsingleton hp_one hp_top hf
  intro f hfLp Œµ hŒµ
  let g : Fin n ‚Üí Œ± ‚Üí Œ≤ := fun k => f k
  have hgLp : ‚àÄ i, Mem‚Ñíp (g i) p Œº := fun i => hfLp i
  obtain ‚ü®S, hmS, hŒºS, hFŒµ‚ü© := h hgLp hŒµ
  obtain ‚ü®s, hms, hŒºs, hfŒµ‚ü© := (hfLp n).snorm_indicator_compl_le hp_one hp_top hŒµ
  refine' ‚ü®s ‚à™ S, (by measurability), (by measurability),
    fun i => _‚ü©
  by_cases hi : i.val < n
  ¬∑ rw [(_ : f i = g ‚ü®i.val, hi‚ü©)]
    ¬∑ rw [compl_union, ‚Üê indicator_indicator]
      apply (snorm_indicator_le _).trans
      exact hFŒµ (Fin.castLT i hi)
    ¬∑ simp only [Fin.coe_eq_castSucc, Fin.castSucc_mk, Fin.eta]
  ¬∑ rw [(_ : i = n)]
    ¬∑ rw [compl_union, inter_comm, ‚Üê indicator_indicator]
      apply (snorm_indicator_le _).trans
      exact hfŒµ
    ¬∑ have hi' := Fin.is_lt i
      rw [Nat.lt_succ_iff] at hi'
      rw [not_lt] at hi
      -- Porting note: Original proof was `simp [‚Üê le_antisymm hi' hi]`
      ext; symm; rw [Fin.coe_ofNat_eq_mod, le_antisymm hi' hi, Nat.mod_succ_eq_iff_lt, Nat.lt_succ]

/-- A finite sequence of Lp functions is uniformly integrable. -/
theorem unifTight_finite [Finite Œπ] (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) {f : Œπ ‚Üí Œ± ‚Üí Œ≤}
    (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) : UnifTight f p Œº := by
  obtain ‚ü®n, hn‚ü© := Finite.exists_equiv_fin Œπ
  intro Œµ hŒµ
  set g : Fin n ‚Üí Œ± ‚Üí Œ≤ := f ‚àò hn.some.symm with hgeq
  have hg : ‚àÄ i, Mem‚Ñíp (g i) p Œº := fun _ => hf _
  obtain ‚ü®s, hms, hŒºs, hfŒµ‚ü© := unifTight_fin hp_one hp_top hg hŒµ
  refine' ‚ü®s, hms, hŒºs, fun i => _‚ü©
  specialize hfŒµ (hn.some i)
  simp_rw [hgeq, Function.comp_apply, Equiv.symm_apply_apply] at hfŒµ
  assumption

end UnifTight


section VitaliConvergence

/- XXX: In the analogous place in MeasureTheory.Function.UniformIntegrable, the measure variable
   is declared `(Œº)` non-implicit. I don't see why, as in all relevant cases it can be
   deduced from other arguments. -/
variable {Œº : Measure Œ±} {p : ‚Ñù‚â•0‚àû}

variable {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

/- Both directions and an iff version of Vitali's convergence theorem on measure spaces
   of not necesserily finite volume. See `Thm III.6.15` of Dunford & Schwartz, Part I (1958). -/

/- We start with the reverse direction. We only need to show that uniform tightness follows
   from convergence in Lp. Mathlib already has the analogous `unifIntegrable_of_tendsto_Lp`
   and `tendstoInMeasure_of_tendsto_snorm`. -/

/-- Intermediate lemma for `unifTight_of_tendsto_Lp`. -/
theorem unifTight_of_tendsto_Lp_zero (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº)
    (hf_tendsto : Tendsto (fun n => snorm (f n) p Œº) atTop (ùìù 0)) : UnifTight f p Œº := by
  intro Œµ hŒµ
  rw [ENNReal.tendsto_atTop_zero] at hf_tendsto
  obtain ‚ü®N, hNŒµ‚ü© := hf_tendsto (ENNReal.ofReal Œµ) (by simpa only [gt_iff_lt, ofReal_pos])
  let F : Fin N ‚Üí Œ± ‚Üí Œ≤ := fun n => f n
  have hF : ‚àÄ n, Mem‚Ñíp (F n) p Œº := fun n => hf n
  obtain ‚ü®s, hms, hŒºs, hFŒµ‚ü© := unifTight_fin hp hp' hF hŒµ
  refine' ‚ü®s, hms, hŒºs, fun n => _‚ü©
  by_cases hn : n < N
  ¬∑ exact hFŒµ ‚ü®n, hn‚ü©
  ¬∑ exact (snorm_indicator_le _).trans (hNŒµ n (not_lt.mp hn))

/-- Convergence in Lp implies uniform tightness. -/
theorem unifTight_of_tendsto_Lp (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº)
    (hg : Mem‚Ñíp g p Œº) (hfg : Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0)) :
    UnifTight f p Œº := by
  have : f = (fun _ => g) + fun n => f n - g := by ext1 n; simp
  rw [this]
  refine' UnifTight.add _ _ hp (fun _ => hg.aestronglyMeasurable)
      fun n => (hf n).1.sub hg.aestronglyMeasurable
  ¬∑ exact unifTight_const hp hp' hg
  ¬∑ exact unifTight_of_tendsto_Lp_zero hp hp' (fun n => (hf n).sub hg) hfg


/- Next we deal with the forward direction. The `Mem‚Ñíp` and `TendstoInMeasure` hypotheses
   are unwrapped and strengthened to by known lemmas to have in addition `StrongMeasurable`
   and a.e. convergence. The bulk of the proof is done under these stronger hyptheses. -/

theorem tendsto_Lp_notFinite_of_tendsto_ae_of_meas (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû)
    {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (hf : ‚àÄ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g)
    (hg' : Mem‚Ñíp g p Œº) (hui : UnifIntegrable f p Œº) (hut : UnifTight f p Œº)
    (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  rw [ENNReal.tendsto_atTop_zero]
  intro Œµ hŒµ
  by_cases hfinŒµ : Œµ ‚â† ‚àû; swap
  ¬∑ rw [not_ne_iff.mp hfinŒµ]; exact ‚ü®0, fun n _ => le_top‚ü©
  by_cases hŒº : Œº = 0
  ¬∑ rw [hŒº]; use 0; intro n _; rw [snorm_measure_zero]; exact zero_le Œµ
  have hŒµ'' : Œµ / 3 ‚â† ‚àû := (ENNReal.div_lt_top (by assumption) (by norm_num)).ne
  have hŒµ' : 0 < Œµ / 3 := ENNReal.div_pos hŒµ.ne.symm (by norm_num)
  have hrŒµ' : 0 < (Œµ / 3).toReal := ENNReal.toReal_pos hŒµ'.ne.symm (by assumption)
  -- use tightness to divide the domain into interior and exterior
  obtain ‚ü®Eg, hmEg, hŒºEg, hgŒµ‚ü© := Mem‚Ñíp.snorm_indicator_compl_le hp hp' hg' hrŒµ'
  obtain ‚ü®Ef, hmEf, hŒºEf, hfŒµ‚ü© := hut hrŒµ'
  have hmE := hmEf.union hmEg
  have hfmE := (measure_union_le Ef Eg).trans_lt (add_lt_top.mpr ‚ü®hŒºEf, hŒºEg‚ü©)
  set E : Set Œ± := Ef ‚à™ Eg
  -- use uniform integrability to get control on the limit over E
  have hgE' := Mem‚Ñíp.restrict E hg'
  have huiE := unifIntegrable_restrict hui hmE
  have hfgE : (‚àÄ·µê x ‚àÇ(Œº.restrict E), Tendsto (fun n => f n x) atTop (ùìù (g x))) := ae_restrict_of_ae hfg
  have ffmE : Fact _ := { out := hfmE }
  have ifmE := @Restrict.isFiniteMeasure _ _ _ Œº ffmE  -- XXX: any way to do this without explitizing all arguments?
  have hInner := tendsto_Lp_of_tendsto_ae_of_meas (Œº.restrict E) hp hp' hf hg hgE' huiE hfgE
  rw [ENNReal.tendsto_atTop_zero] at hInner
  -- get a sufficiently large N for given Œµ, and consider any n ‚â• N
  obtain ‚ü®N, hfngŒµ‚ü© := hInner (Œµ / 3) hŒµ'
  use N; intro n hn
  -- get interior estimates
  have hmfngE : AEStronglyMeasurable _ Œº := (((hf n).sub hg).indicator hmE).aestronglyMeasurable
  have hfngEŒµ := calc
    snorm (E.indicator (f n - g)) p Œº
      = _ := snorm_indicator_eq_snorm_restrict hmE
    _ ‚â§ Œµ / 3 := hfngŒµ n hn
  -- get exterior estimates
  have hmgEc : AEStronglyMeasurable _ Œº := (hg.indicator hmE.compl).aestronglyMeasurable
  have hgEcŒµ := calc
    snorm (E·∂ú.indicator g) p Œº
      ‚â§ _ := by
        unfold_let; rw [compl_union, ‚Üê indicator_indicator]
    _ ‚â§ _ := snorm_indicator_le _
    _ ‚â§ _ := hgŒµ
    _ = Œµ / 3 := ENNReal.ofReal_toReal hŒµ''
  have hmfnEc : AEStronglyMeasurable _ Œº := ((hf n).indicator hmE.compl).aestronglyMeasurable
  have hfnEcŒµ : snorm (E·∂ú.indicator (f n)) p Œº ‚â§ Œµ / 3 := calc
    snorm (E·∂ú.indicator (f n)) p Œº
      ‚â§ _ := by
        unfold_let; rw [compl_union, inter_comm, ‚Üê indicator_indicator]
    _ ‚â§ _ := snorm_indicator_le _
    _ ‚â§ _ := hfŒµ n
    _ = Œµ / 3 := ENNReal.ofReal_toReal hŒµ''
  have hmfngEc : AEStronglyMeasurable _ Œº := (((hf n).sub hg).indicator hmE.compl).aestronglyMeasurable
  have hfngEcŒµ := calc
    snorm (E·∂ú.indicator (f n - g)) p Œº
      = _ := by rw [(E·∂ú.indicator_sub' _ _)]
    _ ‚â§ _ := by apply snorm_sub_le (by assumption) (by assumption) hp
    _ ‚â§ Œµ / 3 + Œµ / 3 := add_le_add hfnEcŒµ hgEcŒµ
  -- finally, combine interior and exterior estimates
  calc
    snorm (f n - g) p Œº
      = snorm (E·∂ú.indicator (f n - g) + E.indicator (f n - g)) p Œº := by
        congr; exact (E.indicator_compl_add_self _).symm
    _ ‚â§ _ := by
        apply snorm_add_le (by assumption) (by assumption) hp
    _ ‚â§ (Œµ / 3 + Œµ / 3) + Œµ / 3 := add_le_add hfngEcŒµ hfngEŒµ
    _ = Œµ := by simp only [ENNReal.add_thirds] --ENNReal.add_thirds Œµ

/- Lemma used in `tendsto_Lp_notFinite_of_tendsto_ae`. Alternative name: `ae_tendsto_ae_congr`? -/
theorem tendsto_ae_congr_ae {f f' : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g g' : Œ± ‚Üí Œ≤}
    (hff' : ‚àÄ (n : ‚Ñï), f n =·µê[Œº] f' n) (hgg' : g =·µê[Œº] g')
    (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x)))
    : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f' n x) atTop (ùìù (g' x)) := by
  have hff'' := eventually_countable_forall.mpr hff'
  filter_upwards [hff'', hgg', hfg] with x hff'x hgg'x hfgx
  apply Tendsto.congr hff'x
  rw [‚Üê hgg'x]; exact hfgx

theorem tendsto_Lp_notFinite_of_tendsto_ae (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû)
    {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (haef : ‚àÄ n, AEStronglyMeasurable (f n) Œº)
    (hg' : Mem‚Ñíp g p Œº) (hui : UnifIntegrable f p Œº) (hut : UnifTight f p Œº)
    (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  -- come up with an a.e. equal strongly measurable replacement `f` for `g`
  have hf := fun n => (haef n).stronglyMeasurable_mk
  have hff' := fun n => (haef n).ae_eq_mk (Œº := Œº)
  have hui' := hui.ae_eq hff'
  have hut' := hut.ae_eq hff'
  have hg := hg'.aestronglyMeasurable.stronglyMeasurable_mk
  have hgg' := hg'.aestronglyMeasurable.ae_eq_mk (Œº := Œº)
  have hg'' := hg'.ae_eq hgg'
  have haefg' := tendsto_ae_congr_ae hff' hgg' hfg
  set f' := fun n => (haef n).mk (Œº := Œº)
  set g' := hg'.aestronglyMeasurable.mk (Œº := Œº)
  have haefg (n : ‚Ñï) : f n - g =·µê[Œº] f' n - g' := (hff' n).sub hgg'
  have hsnfg (n : ‚Ñï) := snorm_congr_ae (p := p) (haefg n)
  apply Filter.Tendsto.congr (fun n => (hsnfg n).symm)
  exact tendsto_Lp_notFinite_of_tendsto_ae_of_meas hp hp' hf hg hg'' hui' hut' haefg'


/-- Forward direction of Vitali's convergence theorem (non-finite version):
    if `f` is a sequence of uniformly integrable, uniformly tight functions that converge in
    measure to some function `g` in a finite measure space, then `f` converge in Lp to `g`. -/
theorem tendsto_Lp_notFinite_of_tendstoInMeasure (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû)
    (hf : ‚àÄ n, AEStronglyMeasurable (f n) Œº) (hg : Mem‚Ñíp g p Œº)
    (hui : UnifIntegrable f p Œº) (hut : UnifTight f p Œº)
    (hfg : TendstoInMeasure Œº f atTop g) : Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  refine' tendsto_of_subseq_tendsto fun ns hns => _
  obtain ‚ü®ms, _, hms'‚ü© := TendstoInMeasure.exists_seq_tendsto_ae fun Œµ hŒµ => (hfg Œµ hŒµ).comp hns
  exact ‚ü®ms,
    tendsto_Lp_notFinite_of_tendsto_ae hp hp' (fun _ => hf _) hg
      (fun Œµ hŒµ => -- `UnifIntegrable` on a subsequence
        let ‚ü®Œ¥, hŒ¥, hŒ¥'‚ü© := hui hŒµ
        ‚ü®Œ¥, hŒ¥, fun i s hs hŒºs => hŒ¥' _ s hs hŒºs‚ü©)
      (fun Œµ hŒµ => -- `UnifTight` on a subsequence
        let ‚ü®s, hms, hŒºs, hfŒµ‚ü© := hut hŒµ
        ‚ü®s, hms, hŒºs, fun i => hfŒµ _‚ü©)
      hms'‚ü©


/-- **Vitali's convergence theorem** (non-finite measure version):
    A sequence of functions `f` converges to `g` in Lp
    if and only if it is uniformly integrable, uniformly tight and to `g` in measure. -/
theorem tendstoInMeasure_notFinite_iff_tendsto_Lp (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû)
    (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº) (hg : Mem‚Ñíp g p Œº) :
    /-(‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x)))-/ TendstoInMeasure Œº f atTop g ‚àß UnifIntegrable f p Œº ‚àß UnifTight f p Œº
      ‚Üî Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := --by
  ‚ü®fun h => tendsto_Lp_notFinite_of_tendstoInMeasure hp hp' (fun n => (hf n).1) hg h.2.1 h.2.2 h.1,
    fun h =>
    ‚ü®tendstoInMeasure_of_tendsto_snorm (lt_of_lt_of_le zero_lt_one hp).ne.symm
        (fun n => (hf n).aestronglyMeasurable) hg.aestronglyMeasurable h,
      unifIntegrable_of_tendsto_Lp Œº hp hp' hf hg h,
      unifTight_of_tendsto_Lp hp hp' hf hg h‚ü©‚ü©

#print axioms tendstoInMeasure_notFinite_iff_tendsto_Lp

end VitaliConvergence


end MeasureTheory
